// Generated by CoffeeScript 1.6.3
(function() {
  var CSAttributedRange, CSRange, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  CSRange = (function() {
    function CSRange(location, length, options) {
      var k, o, v, _ref;
      this.location = location != null ? location : NaN;
      this.length = length != null ? length : NaN;
      if (options == null) {
        options = {};
      }
      if (typeof this.location === 'object') {
        o = this.location;
        _ref = this.length;
        for (k in _ref) {
          v = _ref[k];
          if (typeof this.length === 'object') {
            o[k] = v;
          }
        }
        for (k in options) {
          v = options[k];
          if (typeof options === 'object') {
            o[k] = v;
          }
        }
        options = o;
      }
      this.location = typeof this.location === 'number' ? this.location : NaN;
      this.length = typeof this.length === 'number' ? this.length : NaN;
      for (k in options) {
        v = options[k];
        if (k === 'location') {
          this.location = v;
        } else if (k === 'length') {
          this.length = v;
        }
      }
    }

    CSRange.newRangeFromArray = function(a, options) {
      if (options == null) {
        options = {};
      }
      return new CSRange(a[0], a.length, options);
    };

    CSRange.newRangeFromRange = function(range) {
      var options;
      if (range) {
        options = {};
        return new CSRange(range.location, range.length, options);
      }
    };

    CSRange.prototype.range = function(a, b) {
      if (a != null) {
        if (typeof a === 'object' && (a.location != null) && (a.length != null)) {
          this.location = a.location;
          this.length = a.length;
        } else if ((b != null) && typeof a === 'number' && typeof b === 'number') {
          this.location = a;
          this.length = b;
        }
      }
      return {
        location: this.location,
        length: this.length
      };
    };

    CSRange.prototype.maxEdge = function() {
      return this.location + this.length;
    };

    CSRange.prototype.array = function(a) {
      var _i, _ref, _ref1, _results;
      if (a) {
        this.range(a[0], a.length);
      }
      if (this.length) {
        return (function() {
          _results = [];
          for (var _i = _ref = this.location, _ref1 = this.maxEdge(); _ref <= _ref1 ? _i < _ref1 : _i > _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
      } else {
        return [];
      }
    };

    CSRange.prototype.newJSON = function() {
      var j, k, v, _ref;
      j = {
        location: this.location,
        length: this.length
      };
      _ref = this.modes;
      for (k in _ref) {
        v = _ref[k];
        if (k !== j.mode) {
          j.modes[k] = {
            location: v.location,
            length: v.length
          };
        }
      }
      return j;
    };

    CSRange.newRangeFromJSON = function(j, options) {
      var le, lo;
      if (options == null) {
        options = {};
      }
      lo = j.location;
      le = j.length;
      if ((lo != null) && (le != null)) {
        return new CSRange(lo, le, options);
      }
      return null;
    };

    return CSRange;

  })();

  CSAttributedRange = (function(_super) {
    __extends(CSAttributedRange, _super);

    function CSAttributedRange(location, length, options) {
      var o;
      this.location = location != null ? location : NaN;
      this.length = length != null ? length : NaN;
      if (options == null) {
        options = {};
      }
      o = typeof this.location === 'object' ? this.location : void 0;
      CSAttributedRange.__super__.constructor.call(this, this.location, this.length, options);
      this.attributes = {};
      if (typeof o === 'object' && o.attributes) {
        this.addAttributes(o.attributes);
      }
      if (options.attributes) {
        this.addAttributes(options.attributes);
      }
    }

    CSAttributedRange.prototype.addAttribute = function(k, v) {
      this.attributes[k] = v;
    };

    CSAttributedRange.prototype.addAttributes = function(attributesToAdd) {
      var k, v;
      for (k in attributesToAdd) {
        v = attributesToAdd[k];
        this.addAttribute(k, v);
      }
    };

    return CSAttributedRange;

  })(CSRange);

  root.CSRange = CSRange;

  root.CSAttributedRange = CSAttributedRange;

}).call(this);
